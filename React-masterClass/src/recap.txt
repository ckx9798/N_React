6-2 Recoil 설치 후 기존 데이터 대체

현재 App -> router -> coins -> coin -> chart 순으로 다크모드에 관한 props를 전달하고 있음.
하지만 router, coins, coin 등 해당 props이 필요없는 컴포넌트들임
이걸 해결해주는데 state management

Recoil을 사용하면, 
전역적으로 관리하기 때문에 
필요없는 컴포넌트를 거치고 전달하는게 아닌
곧바로 필요한 컴포넌트에서 
바로 꺼내다 쓸 수 있음.

1. npm install recoil
2. RecoilRoot 컴포넌트로 감싸주기
3. 상태 관리할 데이터 만들기 - atom 
    - 1. key : 고유한 식별자 (이름)
    - 2. default : 기본값 (false)
4. 원하는 곳에서 useRecoilValue 사용해서 상태를 꺼내다 쓰기

--------------------------------

6-3 Recoil 상태 변환
=> useSetRecoilState 사용해서 상태 변환 함수 만들기

기본 문법
const setterFn = useSetRecoilState(설정한 atom);
setterFn(변환할 값);

--------------------------------

6-6 리액트 훅 폼 

기존 방식으로 로그인이나 회원가입 폼을 만들게 된다면
각각의 인풋 마다 state 와 onChange 함수를 만들어야 함.

이걸 해결해주는 것이 리액트 훅 폼
리액트 훅 폼은 위 인풋의 상태를 한줄로 해결해줄 뿐만아니라
다양한 form validation 기능을 제공

npm install react-hook-form

const { } = useForm() 
useForm이라는 명령어 안에 수많은 기능이 담겨져 있다

📌 이 중 register 라는 기능을 사용하면
onChange 함수와 toDo state를 사용하지 않아도 
input 상태를 관리할 수 있다.

console.log(register("toDo"))
로 register를 콘솔에 찍어보면 
onBlur, onChange, ref 가 출력이된다 

해당 내용을 사용하고 싶은 input에 
...register("toDo") 이렇게 주면, 
위에 있는 이름, onBlur, onChange, ref 를 사용할 수 있다.

📌 watch 라는 기능은
form 입력값의 변화를 관찰 할 수 있다 
console.log(watch())
를 하고 
input에 값을 입력하여 변화를 주면
watch 함수가 작동하여 변화된 값을 콘솔에 출력해준다. { toDo: "변화된 값" }

💡 리액트훅폼의 강력함은 여러 인풋을 사용할 때 나온다
여러 인풋에 register를 주고 다른 네임을 준다음
watch 함수를 콘솔에 찍어보면 
{ toDo: "변화된 값", email: "변화된 값", firstName: "변화된 값", password: "변화된 값", passwordConfirm: "변화된 값" }
이렇게 객체 형태로 출력이 된다.


